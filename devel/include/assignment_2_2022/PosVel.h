// Generated by gencpp from file assignment_2_2022/PosVel.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT_2_2022_MESSAGE_POSVEL_H
#define ASSIGNMENT_2_2022_MESSAGE_POSVEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment_2_2022
{
template <class ContainerAllocator>
struct PosVel_
{
  typedef PosVel_<ContainerAllocator> Type;

  PosVel_()
    : msg_pos_x(0.0)
    , msg_pos_y(0.0)
    , msg_vel_x(0.0)
    , msg_vel_y(0.0)  {
    }
  PosVel_(const ContainerAllocator& _alloc)
    : msg_pos_x(0.0)
    , msg_pos_y(0.0)
    , msg_vel_x(0.0)
    , msg_vel_y(0.0)  {
  (void)_alloc;
    }



   typedef double _msg_pos_x_type;
  _msg_pos_x_type msg_pos_x;

   typedef double _msg_pos_y_type;
  _msg_pos_y_type msg_pos_y;

   typedef double _msg_vel_x_type;
  _msg_vel_x_type msg_vel_x;

   typedef double _msg_vel_y_type;
  _msg_vel_y_type msg_vel_y;





  typedef boost::shared_ptr< ::assignment_2_2022::PosVel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment_2_2022::PosVel_<ContainerAllocator> const> ConstPtr;

}; // struct PosVel_

typedef ::assignment_2_2022::PosVel_<std::allocator<void> > PosVel;

typedef boost::shared_ptr< ::assignment_2_2022::PosVel > PosVelPtr;
typedef boost::shared_ptr< ::assignment_2_2022::PosVel const> PosVelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment_2_2022::PosVel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment_2_2022::PosVel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment_2_2022::PosVel_<ContainerAllocator1> & lhs, const ::assignment_2_2022::PosVel_<ContainerAllocator2> & rhs)
{
  return lhs.msg_pos_x == rhs.msg_pos_x &&
    lhs.msg_pos_y == rhs.msg_pos_y &&
    lhs.msg_vel_x == rhs.msg_vel_x &&
    lhs.msg_vel_y == rhs.msg_vel_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment_2_2022::PosVel_<ContainerAllocator1> & lhs, const ::assignment_2_2022::PosVel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment_2_2022

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2022::PosVel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2022::PosVel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2022::PosVel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2022::PosVel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2022::PosVel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2022::PosVel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment_2_2022::PosVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62b77e440a60d59d72cbcf5ad778d584";
  }

  static const char* value(const ::assignment_2_2022::PosVel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62b77e440a60d59dULL;
  static const uint64_t static_value2 = 0x72cbcf5ad778d584ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment_2_2022::PosVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment_2_2022/PosVel";
  }

  static const char* value(const ::assignment_2_2022::PosVel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment_2_2022::PosVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 msg_pos_x\n"
"float64 msg_pos_y\n"
"float64 msg_vel_x\n"
"float64 msg_vel_y\n"
;
  }

  static const char* value(const ::assignment_2_2022::PosVel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment_2_2022::PosVel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_pos_x);
      stream.next(m.msg_pos_y);
      stream.next(m.msg_vel_x);
      stream.next(m.msg_vel_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosVel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment_2_2022::PosVel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment_2_2022::PosVel_<ContainerAllocator>& v)
  {
    s << indent << "msg_pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.msg_pos_x);
    s << indent << "msg_pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.msg_pos_y);
    s << indent << "msg_vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.msg_vel_x);
    s << indent << "msg_vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.msg_vel_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT_2_2022_MESSAGE_POSVEL_H
